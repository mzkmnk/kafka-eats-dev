AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: env
          Value: "dev"

  # Internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  # connect VPC to InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # routeTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: env
          Value: "dev"

  # add internetGateway in routeTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Subnet
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: env
          Value: "dev"

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: env
          Value: "dev"

  # link publicSubnetA to RouteTable
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  # link publicSubnetC to RouteTable
  PublicSubneetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  # Security Group

  # ECS Security Group
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "kafka-eats-dev ecs security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # ALB Security Group
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "kafka-eats-dev alb security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Env
          Value: "dev"

  # ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "alb-dev"
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Type: application
      IpAddressType: ipv4

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: target-group-dev
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: "3000"
      HealthCheckPath: "/"
      Matcher:
        HttpCode: "200"

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Execute Role
  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dev-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # Cluster
  HonoCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: hono-cluster
      Tags:
        - Key: env
          Value: "dev"

  # ECS Task Definition
  HonoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: hono-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      ContainerDefinitions:
        - Name: hono-container
          Image: "796092240090.dkr.ecr.ap-northeast-1.amazonaws.com/kafka-eats-repo-dev:latest"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Essential: true

  # ECS Service
  HonoService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref HonoCluster
      ServiceName: hono-service
      TaskDefinition: !Ref HonoTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: hono-container
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnetA
            - !Ref PublicSubnetC
          SecurityGroups:
            - !Ref EcsSecurityGroup
          AssignPublicIp: ENABLED

Outputs:
  ECSServiceName:
    Description: "ecs service name"
    Value: !Ref HonoService
  ECSClusterName:
    Description: "ecs cluster name"
    Value: !Ref HonoCluster
